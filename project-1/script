from collections import Counter

class FrequentWordsCounter:

    # Variable to store number of words to be checked and variable to store word counts
    def __init__(self, n: int = 10):
        self.top_n = n
        self.word_counts = Counter()

    # Convert the word to lowercase to ensure case-insensitivity
    def process_word(self, word: str):
        word = word.lower()
        self.word_counts[word] += 1

    # Retrieve the top n words by frequency using a for loop
    def get_top_words(self):
        top_words = []

        # Sort the word counts
        word_count_items = list(self.word_counts.items())
        word_count_items.sort(key=self._sort_by_count, reverse=True)

        # Take the top n words
        for word, count in word_count_items[:self.top_n]:
            top_words.append((word, count))

        return top_words

    # Function to help sort words by looking at values(word count) in each dictionary item
    def _sort_by_count(self, item):
        return item[1]

    def set_top_n(self, n: int):
        self.top_n = n

# Ask the user for a value of n
try:
    user_n = int(input("Enter the number of top frequent words to track (default is 10): "))
    if user_n <= 0:
        print("Invalid input. Using the default value of 10.")
        user_n = 10
except ValueError:
    print("Invalid input. Using the default value of 10.")
    user_n = 10

# Create a tracker with the specified top_n
tracker = FrequentWordsCounter(n=user_n)

# Ask the user for input text
text = input("Enter a text to analyze: ")

# Split the text into words
words = text.split()

# Process each word in the text
for word in words:
    tracker.process_word(word)

# Display the top n words with counts
print(f"Top {tracker.top_n} frequent words and their counts:")
for word, count in tracker.get_top_words():
    print(f"{word}: {count}")
